#include <QCoreApplication>
#include <opencv2/opencv.hpp>
#include <iostream>
#include <vector>
#include <QDirIterator>
#include <QDebug>

using namespace cv;
using namespace std;



class CameraCalibrator
{
    std::vector<std::vector<cv::Point3f>> objectPoints;
    std::vector<std::vector<cv::Point2f>> imagePoints;
    Mat cameraMatrix;
    Mat distCofes;
    int flag;
    Mat map1,map2;
    bool mustInitUndistort;

public:
    CameraCalibrator() : flag(0), mustInitUndistort(true)
    {

    }

    int addChessboardPoints(const std::vector<std::string> filelist,
                            cv::Size & boardSize)
    {
        std::vector<cv::Point2f> imageCorners;
        std::vector<cv::Point3f> objectCorners;

        for (int i=0; i<boardSize.height; i++)
        {
            for (int j=0; j<boardSize.width; j++)
            {
                objectCorners.push_back(cv::Point3f(i, j, 0.0f));
            }
        }

        Mat image;
        int successes = 0;
        for (int i = 0 ; i < filelist.size() ; i++)
        {
            image = cv::imread(filelist[i],0);
            bool found = findChessboardCorners(image,boardSize,imageCorners);
            cornerSubPix(image,imageCorners,Size(5,5),Size(-1,-1),
                         cv::TermCriteria(cv::TermCriteria::MAX_ITER +
                                          cv::TermCriteria::EPS,
                                          30,
                                          0.1));

            if (imageCorners.size() == boardSize.area())
            {
                addpoints(imageCorners,objectCorners);
            }
            successes++;
        }
        return successes;
    }


    void addpoints(const vector<Point2f> & imagecorners , const vector<Point3f> &objectcorners)
    {
        imagePoints.push_back(imagecorners);
        objectPoints.push_back(objectcorners);

    }


    double Calibrate(Size &image_size)
    {
        mustInitUndistort = true;
        vector<Mat> tvecs, rvecs;
        return calibrateCamera(objectPoints , imagePoints ,
                               image_size , cameraMatrix , distCofes ,
                               rvecs , tvecs , flag);

    }


    Mat remap(const Mat &image)
    {

        Mat undistorted;
        if (mustInitUndistort)
        {
            initUndistortRectifyMap(cameraMatrix,distCofes,Mat(),Mat(),image.size()
                                    ,CV_32FC1,map1,map2);
            mustInitUndistort = false;
        }

        cv::remap(image, undistorted, map1, map2,
                  cv::INTER_LINEAR);
        cout<<"camera matix"<<cameraMatrix<<endl;
        return undistorted;

    }




};

int main(int argc, char *argv[])
{

    vector<string> file_names;
    CameraCalibrator calib;
    QDirIterator it("/home/naser/Downloads/homograpyhy/stereo-calibration-master/calib_imgs/1", QStringList() << "*.jpg", QDir::Files, QDirIterator::Subdirectories);
    Mat image;
    cv::Size boardSize(9,6);
    Size size;
    while (it.hasNext())
    {

        // qDebug() << it.next();
        QString name = it.next();
        String file_name = name.toStdString();
        file_names.push_back(file_name);
        image = imread(file_name);
        vector<Point2f> imgcorners;


       // cout<<"success = " <<sucs<<endl;


        //a  bool found = findChessboardCorners(image,boardSize,imgcorners);
        //  drawChessboardCorners(image,boardSize,imgcorners,found);
        // imshow("image",image);
        // waitKey(0);
        cout<<image.size<<endl;
    }

    int sucs =  calib.addChessboardPoints(file_names,boardSize);
    size = image.size();
    calib.Calibrate(size);
    image = imread("/home/naser/Downloads/homograpyhy/stereo-calibration-master/calib_imgs/2/left14.jpg");
    Mat im =  calib.remap(image);
    imshow("ss",im);
    waitKey(0);

}
